[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/utils.mjs",
    "content": "import { Logger } from './vendor/logger.min.mjs';\n\n/**\n* A utilities class\n* @class UtilsSingleton\n* @license Utils is free software, available under the terms of a MIT style License.\n* @author https://github.com/doubleactii\n*/\nclass UtilsSingleton {\n\t/**\n\t * Object storing all color objects being transitioned at the moment\n\t * @private\n\t * @type {Object}\n\t */\n\ttransitions = {};\n\t/**\n\t * An array storing all the reserved unique IDS\n\t * @private\n\t * @type {Array}\n\t */\n\tstoredIDs = [];\n\t/**\n\t * The version of the module.\n\t */\n\tversion = \"VERSION_REPLACE_ME\";\n\tconstructor() {\n        // Create a logger\n        /** The logger module this module uses to log errors / logs\n         * @private\n         * @type {Object}\n         */\n        this.logger = new Logger();\n        this.logger.registerType('Utils-Module', '#ff6600');\n\t}\n\t/**\n\t * Generates a random decimal number between two numbers with a specified number of decimal places.\n\t * \n\t * @param {number} pNum1 - The first number to use for generating the random decimal number.\n\t * @param {number} pNum2 - The second number to use for generating the random decimal number.\n\t * @param {number} [pPlaces=1] - The number of decimal places to include in the generated random decimal number. Defaults to 1 if not provided.\n\t * @returns {number} A random decimal number between the two numbers with the specified number of decimal places.\n\t */\n\tdecimalRand(pNum1, pNum2, pPlaces = 1) {\n\t\tconst result = Number((Math.random() * (pNum1 - pNum2) + pNum2).toFixed(pPlaces));\n\t\treturn result;\n\t}\n\t/**\n\t * Generates a random decimal number between two numbers with a specified number of decimal places.\n\t * \n\t * @param {number} pNum1 - The first number to use for generating the random decimal number.\n\t * @param {number} pNum2 - The second number to use for generating the random decimal number.\n\t * @returns {number} A random decimal number between the two numbers with the specified number of decimal places.\n\t */\n\trand(pNum1, pNum2) {\n\t\tconst result = Number((Math.random() * (pNum1 - pNum2) + pNum2));\n\t\treturn Math.round(result);\n\t}\n\t/**\n\t * Calculates the percentage of a value relative to a total value.\n\t * \n\t * @param {number} pValue - The value to calculate the percentage of.\n\t * @param {number} pTotalValue - The total value to calculate the percentage relative to.\n\t * @returns {number} The percentage of the value relative to the total value.\n\t */\n\tgetPercentage(pValue, pTotalValue) {\n\t\treturn (100 * pValue) / pTotalValue;\n\t}\n\t/**\n\t * Clamps a number between a minimum and maximum value.\n\t * \n\t * @param {number} pNumber - The number to clamp.\n\t * @param {number} [pMin=0] - The minimum value to clamp the number to. Defaults to 0 if not provided.\n\t * @param {number} [pMax=1] - The maximum value to clamp the number to. Defaults to 1 if not provided.\n\t * @returns {number} The clamped number between the minimum and maximum values.\n\t */\n\tclamp(pNumber, pMin = 0, pMax = 1) {\n\t\treturn Math.max(pMin, Math.min(pNumber, pMax));\n\t}\n\t/**\n\t * Linearly interpolates between two values by a specified amount.\n\t * \n\t * @param {number} pStart - The start value to interpolate from.\n\t * @param {number} pEnd - The end value to interpolate to.\n\t * @param {number} pAmount - The amount to interpolate between the start and end values.\n\t * @returns {number} The interpolated value between the start and end values based on the specified amount.\n\t */\n\tlerp(pStart, pEnd, pAmount) {\n\t\treturn (1-pAmount)*pStart+pAmount*pEnd;\n\t}\n\t/**\n\t * Linearly interpolates between two values by a specified amount and returns the result as a floored integer.\n\t * \n\t * @param {number} pStart - The start value to interpolate from.\n\t * @param {number} pEnd - The end value to interpolate to.\n\t * @param {number} pAmount - The amount to interpolate between the start and end values.\n\t * @returns {number} The interpolated value between the start and end values based on the specified amount, rounded down to the nearest integer.\n\t */\n\tflooredLerp(pStart, pEnd, pAmount) {\n\t\treturn Math.floor(this.lerp(pStart, pEnd, pAmount));\n\t}\n\t/**\n\t * Rounds a number to a specified number of decimal places.\n\t * \n\t * @param {number} pNumber - The number to round.\n\t * @param {number} [pPlace=1] - The number of decimal places to round to. Defaults to 1 if not provided.\n\t * @returns {number} The rounded number to the specified number of decimal places.\n\t */\n\tround(pNumber, pPlace=1) {\n\t\treturn Math.round(pPlace * pNumber) / pPlace;\n\t}\n\t/**\n\t * Normalizes a value between a minimum and maximum value.\n\t * \n\t * @param {number} pVal - The value to normalize.\n\t * @param {number} pMin - The minimum value for normalization.\n\t * @param {number} pMax - The maximum value for normalization.\n\t * @returns {number} The normalized value between 0 and 1 based on the input value's position between the minimum and maximum values.\n\t * If the difference between pMax and pMin is 0, returns 1 to avoid dividing by zero.\n\t */\n\tnormalize(pVal, pMin, pMax) {\n\t\tif (pMax - pMin === 0) return 1;\n\t\treturn (pVal - pMin) / (pMax - pMin);\n\t}\n\t/**\n\t * Normalizes a value between a minimum and maximum value, clamped to the range of -1 to 1.\n\t *\n\t * @param {number} pVal - The value to normalize.\n\t * @param {number} pMin - The minimum value for normalization.\n\t * @param {number} pMax - The maximum value for normalization.\n\t * @returns {number} The normalized and clamped value between -1 and 1 based on the input value's\n\t * position between the minimum and maximum values. If the difference between pMax and pMin is 0,\n\t * returns 1 to avoid dividing by zero.\n\t */\n\tnormalizeRanged(pVal, pMin, pMax) {\n\t\tif (pMax - pMin === 0) return 1;\n\t\tconst normalizedValue = -((2 * this.normalize(pVal, pMin, pMax)) - 1);\n\t\t// Clamp the normalized value to the range of -1 to 1\n\t\treturn this.clamp(normalizedValue, -1, 1);\n\t};\n\t/**\n\t * Checks if a value is within a range of minimum and maximum values (inclusive).\n\t * \n\t * @param {number} pVal - The value to check.\n\t * @param {number} pMin - The minimum value of the range to check against.\n\t * @param {number} pMax - The maximum value of the range to check against.\n\t * @returns {boolean} True if the value is within the range (inclusive), false otherwise.\n\t */\n\twithin(pVal, pMin, pMax) {\n\t\treturn pVal >= pMin && pVal <= pMax;\n\t}\n\t/**\n\t * Formats a number by rounding it to the nearest integer and adding commas to separate thousands places.\n\t * \n\t * @param {number} pNum - The number to format.\n\t * @returns {string} A string representation of the formatted number.\n\t */\n\tformatIntegerWithCommas(pNum) {\n\t\treturn pNum.toFixed().toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n\t}\n\t/**\n\t * Converts degrees to radians.\n\t * \n\t * @param {number} pDegrees - The angle in degrees.\n\t * @returns {number} The angle in radians.\n\t */\n\ttoRadians(pDegrees) {\n\t\treturn pDegrees * (Math.PI / 180);\n\t}\n\t/**\n\t * Converts radians to degrees.\n\t * \n\t * @param {number} pRadians - The angle in radians.\n\t * @returns {number} The angle in degrees.\n\t */\n\ttoDegrees(pRadians) {\n\t\treturn pRadians * (180 / Math.PI);\n\t}\n\t/**\n\t * Returns a random element from the given array.\n\t * \n\t * @param {Array} pArray - The input array.\n\t * @returns {*} A random element from the array.\n\t */\n\tpick(pArray) {\n\t\tconst randomIndex = Math.floor(Math.random() * pArray.length);\n\t\treturn pArray[randomIndex];\n\t}\n\t/**\n\t * Removes properties from an object except those listed in the exclude array.\n\t * \n\t * @param {object} pObject - The object to remove properties from.\n\t * @param {Array} pExclude - The array of property names to exclude from removal.\n\t*/\n\tremoveProperties(pObject, pExclude) {\n\t\tif (typeof(pObject) === 'object') {\n\t\t\tfor (const prop in pObject) {\n\t\t\t\t// Do not reset these properties.\n\t\t\t\tif (Array.isArray(pExclude) && pExclude.includes(prop)) continue;\n\t\t\t\tif (pObject.hasOwnProperty(prop)) {\n\t\t\t\t\tdelete pObject[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\t/**\n\t * Returns true with probability proportional to the given number.\n\t * The higher the number, the higher the chance of returning true.\n\t * \n\t * @param {number} pChance - The probability value, between 0 and 100 (inclusive).\n\t * @returns {boolean} - Returns true or false, based on the probability value.\n\t */\n\tprob(pChance) {\n\t\tif (pChance <= 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (pChance >= 100) {\n\t\t\treturn true;\n\t\t}\n\t\tconst randomNumber = Math.floor(Math.random() * 100) + 1;\n\t\treturn randomNumber <= pChance;\n\t}\n\t/**\n\t * Gets the inverse direction of the direction passed\n\t * \n\t * @param {string} pDirection - The direction to get the inverse of.\n\t * @returns {string} The inverse direction\n\t */\n\tgetInverseDirection(pDirection) {\n\t\tswitch (pDirection) {\n\t\t\tcase 'north':\n\t\t\t\treturn 'south';\n\t\t\tcase 'south':\n\t\t\t\treturn 'north';\n\t\t\tcase 'east':\n\t\t\t\treturn 'west';\n\t\t\tcase 'west':\n\t\t\t\treturn 'east';\n\t\t\tcase 'northeast':\n\t\t\t\treturn 'southwest';\n\t\t\tcase 'northwest':\n\t\t\t\treturn 'southeast';\n\t\t\tcase 'southeast':\n\t\t\t\treturn 'northwest';\n\t\t\tcase 'southwest':\n\t\t\t\treturn 'northeast';\n\t\t\tdefault:\n\t\t\t\tthis.logger.prefix('Utils-Module').error(`The direction ${pDirection} is not supported.`);\n\t\t}\n\t}\n\t/**\n\t * Calculates the angle (in radians) from a given direction.\n\t * \n\t * @param {string} pDirection - The direction to calculate the angle from.\n\t * @returns {number} The angle (in radians) associated with the given direction.\n\t * @throws {Error} Throws an error if the direction is not recognized.\n\t */\n\tgetAngleFromDirection(pDirection) {\n\t\tswitch (pDirection) {\n\t\t\tcase 'north':\n\t\t\t\treturn Math.PI / 2;\n\t\t\tcase 'south':\n\t\t\t\treturn (Math.PI * 3) / 2; // Corrected to 270 degrees in radians\n\t\t\tcase 'east':\n\t\t\t\treturn 0;\n\t\t\tcase 'west':\n\t\t\t\treturn Math.PI;\n\t\t\tcase 'northwest':\n\t\t\t\treturn (Math.PI * 3) / 4;\n\t\t\tcase 'northeast':\n\t\t\t\treturn Math.PI / 4;\n\t\t\tcase 'southwest':\n\t\t\t\treturn (Math.PI * 5) / 4;\n\t\t\tcase 'southeast':\n\t\t\t\treturn (Math.PI * 7) / 4;\n\t\t\tdefault:\n\t\t\t\tthis.logger.prefix('Utils-Module').error(`The direction ${pDirection} is not supported.`);\n\t\t}\n\t}\n\t/**\n\t * Centers a rectangle (defined by its dimensions) within a parent rectangle.\n\t *\n\t * @param {number} pChildWidth - The width of the child rectangle.\n\t * @param {number} pChildHeight - The height of the child rectangle.\n\t * @param {number} pParentWidth - The width of the parent rectangle.\n\t * @param {number} pParentHeight - The height of the parent rectangle.\n\t * @param {number} pParentX - The x-coordinate of the parent rectangle.\n\t * @param {number} pParentY - The y-coordinate of the parent rectangle.\n\t * @returns {Object} An object representing the new coordinates of the centered rectangle: { x: centerX, y: centerY }.\n\t *\n\t * @example\n\t * const childWidth = 50;\n\t * const childHeight = 30;\n\t * const parentWidth = 100;\n\t * const parentHeight = 80;\n\t * const parentX = 20;\n\t * const parentY = 10;\n\t * const centeredCoordinates = centerRectangleOnParent(childWidth, childHeight, parentWidth, parentHeight, parentX, parentY);\n\t * // Returns {x: 45, y: 35}\n\t */\n\tcenterRectangleOnParent(pChildWidth, pChildHeight, pParentWidth, pParentHeight, pParentX, pParentY) {\n\t\tconst centerX = pParentX + ((pParentWidth - pChildWidth) / 2);\n\t\tconst centerY = pParentY + ((pParentHeight - pChildHeight) / 2);\n\t\treturn { x: centerX, y: centerY };\n\t}\n\t/**\n\t * Generates a random angle in radians.\n\t * @returns {number} A random angle in radians.\n\t */\n\tgetRandomAngle() {\n\t\treturn Math.random() * (Math.PI * 2); // Random value between 0 and 2*pi (360 degrees)\n\t}\n\t/**\n\t * Gets the angle between two points\n\t * \n\t * @param {Object} pStartPoint - The starting point\n\t * @param {Object} pEndPoint - The ending point\n\t * @returns {number} The angle between the starting point and the ending point\n\t */\n\tgetAngle(pStartPoint, pEndPoint) {\n\t\tconst y = pStartPoint.y - pEndPoint.y;\n\t\tconst x = pStartPoint.x - pEndPoint.x;\n\t\treturn Math.atan2(y, x);\n\t}\n\t/**\n\t * Gets the angle between two points but in VYLO / PIXI coordinate space. Removes 180 degrees from a raw angle\n\t * \n\t * @param {Object} pStartPoint - The starting point\n\t * @param {Object} pEndPoint - The ending point\n\t * @returns {number} The angle between the starting point and the ending point\n\t */\n\tgetAngle2(pStartPoint, pEndPoint) {\n\t\tconst y = pStartPoint.y - pEndPoint.y;\n\t\tconst x = pStartPoint.x - pEndPoint.x;\n\t\treturn (Math.atan2(y, x) - Math.PI) * -1;\n\t}\n\t/**\n\t * Converts a raw angle to be the proper angle in Vylocity. By removing 180 degrees\n\t * @param {number} pAngle - The angle to convert.\n\t * @returns The converted angle\n\t */\n\tconvertRaWAngleToVyloCoords(pAngle) {\n\t\treturn (pAngle - Math.PI) * -1;\n\t}\n\t/**\n\t * Gets the minimal value between the value to add and the maximum allowed value.\n\t * \n\t * @param {number} pCurrent - The current value.\n\t * @param {number} pAdd - The value to add to the current value.\n\t * @param {number} pMax - The maximum value that can be reached.\n\t * @returns {number} The minimal value between the value to add and the remaining value to reach the maximum.\n\t */\n\tgetMinimal(pCurrent, pAdd, pMax) {\n\t\tconst max = pMax - pCurrent;\n\t\treturn Math.min(pAdd, max);\n\t}\n\t/**\n\t * Calculates the Euclidean distance between two points in a two-dimensional space.\n\t *\n\t * @param {Object} pStartPoint - The starting point with x and y coordinates.\n\t * @param {number} pStartPoint.x - The x-coordinate of the starting point.\n\t * @param {number} pStartPoint.y - The y-coordinate of the starting point.\n\t * @param {Object} pEndPoint - The ending point with x and y coordinates.\n\t * @param {number} pEndPoint.x - The x-coordinate of the ending point.\n\t * @param {number} pEndPoint.y - The y-coordinate of the ending point.\n\t * @returns {number} The Euclidean distance between the two points.\n\t *\n\t * @example\n\t * const startPoint = { x: 1, y: 2 };\n\t * const endPoint = { x: 4, y: 6 };\n\t * const distance = getDistance(startPoint, endPoint); // 5\n\t * // Returns the Euclidean distance between the points (1, 2) and (4, 6).\n\t */\n\tgetDistance(pStartPoint, pEndPoint) {\n\t\tconst y = (pStartPoint.y - pEndPoint.y);\n\t\tconst x = (pStartPoint.x - pEndPoint.x);\n\t\treturn Math.sqrt((x * x) + (y * y));\n\t}\n\t/**\n\t * Calculates the new position of a point based on distance and angle.\n\t *\n\t * @param {Object} pPoint - The initial position of the point with x and y coordinates.\n\t * @param {number} pPoint.x - The initial x-coordinate of the point.\n\t * @param {number} pPoint.y - The initial y-coordinate of the point.\n\t * @param {number} pDistance - The distance by which to move the point.\n\t * @param {number} pAngle - The angle (in radians) at which to move the point.\n\t * @returns {Object} The new position of the point after moving by the specified distance and angle.\n\t *\n\t * @example\n\t * const initialPosition = { x: 10, y: 20 };\n\t * const distance = 5;\n\t * const angleInRadians = 0.785398; // 45 degrees\n\t * const newPosition = calculateNewPositionFromDistanceAndAngle(initialPosition, distance, angleInDegrees);\n\t * // Returns the new position of the point after moving by 5 units at a 45-degree angle.\n\t */\n\tcalculateNewPositionFromDistanceAndAngle(pPoint, pDistance, pAngle) {\n\t\tconst newPosition = { x: 0, y: 0 };\n\t\tnewPosition.x = pPoint.x - pDistance * Math.cos(pAngle);\n\t\tnewPosition.y = pPoint.y - pDistance * Math.sin(pAngle);\n\t\treturn newPosition;\n\t};\n\t/**\n\t * Calculates the proportional length based on a current value, a maximum value, and a specified total length.\n\t *\n\t * @param {number} pCurrent - The current value to be scaled.\n\t * @param {number} pMax - The maximum value for scaling.\n\t * @param {number} pTotalLength - The specified total length.\n\t * @returns {number} The proportional length based on the current value, maximum value, and total length.\n\t *\n\t * @example\n\t * const current = 25;\n\t * const max = 50;\n\t * const totalLength = 100;\n\t * const proportionalLength = calculateProportionalLength(current, max, totalLength); // 50\n\t * // Returns the proportional length based on the current value, maximum value, and total length.\n\t */\n\tcalculateProportionalLength(pCurrent, pMax, pTotalLength) {\n\t\treturn (pCurrent / pMax) * pTotalLength;\n\t}\n\t/**\n\t * Calculates the compass direction based on the given angle.\n\t *\n\t * @param {number} pAngle - The angle in radians.\n\t * @returns {string} The compass direction (e.g., 'east', 'southeast', 'south', etc.).\n\t *\n\t * @example\n\t * const angle = Math.PI / 4; // 45 degrees in radians\n\t * const direction = getDirection(angle); // Returns 'northeast'\n\t */\n\tgetDirection(pAngle) {\n\t\tconst degree = Math.abs(Math.floor(((pAngle * (180 / Math.PI)) / 45) + 0.5));\n\t\t// 0 or 360 degrees: 'east'\n\t\t// 45 degrees: 'northeast'\n\t\t// 90 degrees: 'north'\n\t\t// 135 degrees: 'northwest'\n\t\t// 180 degrees: 'west'\n\t\t// 225 degrees: 'southwest'\n\t\t// 270 degrees: 'south'\n\t\t// 315 degrees: 'southeast'\n\t\tconst compassDirections = ['east', 'northeast', 'north', 'northwest', 'west', 'southwest', 'south', 'southeast'];\n\t\treturn compassDirections[(degree % 8)];\n\t}\n\t/**\n\t * Calculates the linear decay of a variable over time.\n\t *\n\t * @param {number} pInitialValue - The initial value of the variable.\n\t * @param {number} pCurrentTime - The current time at which to calculate the variable value.\n\t * @param {number} pMaxTime - The maximum time for the decay process.\n\t * @param {number} [pDecayRate=0.5] - The decay rate (default is 0.5).\n\t * @returns {number} The remaining value of the variable after linear decay.\n\t *\n\t * @example\n\t * const initialValue = 100;\n\t * const currentTime = 50;\n\t * const maxTime = 1000;\n\t * const decayRate = 0.3;\n\t * const remainingValue = linearDecay(initialValue, currentTime, maxTime, decayRate);\n\t * // Returns the remaining value after linear decay.\n\t */\n\tlinearDecay(pInitialValue, pCurrentTime, pMaxTime, pDecayRate = 0.5) {\n\t\t// Calculate the variable value at the current time\n\t\tconst proportionOfTimePassed = pCurrentTime / pMaxTime;\n\t\tconst remainingValue = Math.max(pInitialValue * (1 - (proportionOfTimePassed * pDecayRate)), 1);\n\t\treturn remainingValue;\n\t}\n\t/**\n\t * Generates a unique id\n\t * \n\t * @param {string} pIDLength - The length of the ID to create \n\t * @returns A unique ID\n\t */\n\tgenerateID(pIDLength = 7) {\n\t\tconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t\tconst makeID = function() {\n\t\t\tlet ID = '';\n\t\t\tfor (let i = 0; i < pIDLength; i++) {\n\t\t\t\tID += chars.charAt(Math.floor(Math.random() * chars.length));\n\t\t\t}\n\t\t\treturn ID;\n\t\t}\n\t\tlet ID = makeID();\n\t\twhile(this.storedIDs.includes(ID)) {\n\t\t\tID = makeID();\n\t\t}\n\t\tthis.storedIDs.push(ID);\n\t\treturn ID;\n\t}\n\t/**\n\t * Converts a color in decimal format into hex format\n\t * \n\t * @param {number} pDecimal - The color in decimal format\n\t * @param {number} pChars - The length to make the hex string\n\t * @returns The decimal color converted into hex format\n\t */\n\tdecimalToHex(pDecimal, pChars = 6) {\n\t\treturn '#' + (pDecimal + Math.pow(16, pChars)).toString(16).slice(-pChars).toUpperCase();\n\t}\n\t/**\n\t * Add intensity to this color to get a brighter or dimmer effect\n\t * \n\t * @param {string|number} pColor - Color in hex format or decimal format\n\t * @param {number} pPercent - The percent of brightness to add to this color\n\t * @returns \n\t */\n\taddIntensity(pColor, pPercent) {\n\t\tconst rgb = this.grabColor(pColor).rgbArray;\n\t\tconst r = rgb[0];\n\t\tconst g = rgb[1];\n\t\tconst b = rgb[2];\n\t\tlet rr = 0;\n\t\tlet rg = 0;\n\t\tlet rb = 0;\n\t\tconst black = (r === 0 && g === 0 && b === 0) ? true : false;\n\t\tif (r || black) rr = r + Math.floor((255 * pPercent) / 100);\n\t\tif (g || black) rg = g + Math.floor((255 * pPercent) / 100);\n\t\tif (b || black) rb = b + Math.floor((255 * pPercent) / 100);\n\t\treturn this.grabColor(this.clamp(rr, 0, 255), this.clamp(rg, 0, 255), this.clamp(rb, 0, 255)).hex\n\t}\n\t/**\n\t * Converts an RGB color value to a hexadecimal color value.\n\t * \n\t * @param {number} pR - The red component of the RGB color value (0-255).\n\t * @param {number} pG - The green component of the RGB color value (0-255).\n\t * @param {number} pB - The blue component of the RGB color value (0-255).\n\t*/\n\trgbToHex(pR, pG, pB) {\n\t\tconst r = this.clamp(pR, 0, 255);\n\t\tconst g = this.clamp(pG, 0, 255);\n\t\tconst b = this.clamp(pB, 0, 255);\n\t\tconst craftString = function(pColor) {\n\t\t\treturn pColor.toString(16).padStart(2, '0');\n\t\t}\n\t\tconst hex = '#' + [r, g, b].map(craftString).join('');\n\t\treturn hex;\t\t\n\t}\n\t/**\n\t * Converts a hexadecimal color value to an RGB color value.\n\t * \n\t * @param {string} pHex - The hexadecimal color value to convert (e.g. \"#FF0000\" for red).\n\t * @returns {Array} - An array containing the red, green, and blue components of the RGB color value.\n\t*/\n\thexToRgb(pHex) {\n\t\tpHex = pHex.replace('#', '');\n\t\tif (pHex.length === 3) {\n\t\t\tpHex = pHex.replace(new RegExp('(.)', 'g'), '$1$1');\n\t\t}\n\t\tpHex = pHex.match(new RegExp('..', 'g'));\n\t\tconst r = this.clamp(parseInt(pHex[0], 16), 0, 255);\n\t\tconst g = this.clamp(parseInt(pHex[1], 16), 0, 255);\n\t\tconst b = this.clamp(parseInt(pHex[2], 16), 0, 255);\n\t\treturn [r, g, b];\n\t}\n\t/**\n\t * Converts RGB color values to a decimal value.\n\t * \n\t * @param {number} pR - The red component of the RGB color value (0-255).\n\t * @param {number} pG - The green component of the RGB color value (0-255).\n\t * @param {number} pB - The blue component of the RGB color value (0-255).\n\t*/\n\trgbToDecimal(pR, pG, pB) {\n\t\treturn (pR << 16 | pG << 8 | pB);\n\t}\n\t/**\n\t * Converts a hexadecimal color value to a decimal value.\n\t * \n\t * @param {string} pHex - The hexadecimal color value to convert (e.g. \"#FF0000\" for red).\n\t * @returns {number} - The decimal representation of the hexadecimal color value.\n\t*/\n\thexToDecimal(pHex) {\n\t\tpHex = pHex.replace('#', '');\n\t\treturn parseInt(pHex, 16);\n\t}\n\t/**\n\t * Convert a color to different formats or get a random color\n\t * \n\t * @param {string|number} pSwitch - A hex string representing a color (with or without the tag)\n\t * A color formatted in the decimal format. Or the r value of a rgb color.\n\t * @param {number} [g] g value of a rgb color\n\t * @param {number} [b] b value of a rgb color\n\t * @returns {ColorObject} A color object with various different export options.\n\t * hex, hexTagless, rgb, rgbArray, rgbObject, rgbNormal, decimal formats.\n\t */\n\tgrabColor(pSwitch = this.getRandomColor(), pG, pB) {\n\t\tlet hex, rgb;\n\t\t// Convert rgb to hex\n\t\tif (typeof(pSwitch) === 'number' && typeof(pG) === 'number' && typeof(pB) === 'number') {\n\t\t\thex = this.rgbToHex(pSwitch, pG, pB);\n\t\t\trgb = this.hexToRgb(hex);\n\t\t} else {\n\t\t\t// Convert decimal to hex\n\t\t\tif (typeof(pSwitch) === 'number') {\n\t\t\t\tpSwitch = this.decimalToHex(pSwitch);\n\t\t\t}\n\t\t\thex = pSwitch;\n\t\t\t// Convert hex to rgb\n\t\t\trgb = this.hexToRgb(hex);\n\t\t}\n\t\treturn { \n\t\t\t'hex': hex.toLowerCase(), \n\t\t\t'hexTagless': hex.replace('#', '').toLowerCase(), \n\t\t\t'rgb': 'rgb('+rgb[0]+','+rgb[1]+','+rgb[2]+')', \n\t\t\t'rgbArray': rgb, \n\t\t\t'rgbObject': { 'r': rgb[0], 'g': rgb[1], 'b': rgb[2] }, \n\t\t\t'rgbNormal': [Math.round(rgb[0]/255 * 100) / 100, Math.round(rgb[1]/255 * 100) / 100, Math.round(rgb[2]/255 * 100) / 100], \n\t\t\t'decimal': this.hexToDecimal(hex) \n\t\t};\n\t}\n\t/**\n\t * Gets a random color\n\t * \n\t * @returns {string} A random color in the hex format\n\t */\n\tgetRandomColor() {\n\t\tconst chars = '0123456789ABCDEF';\n\t\tlet color = '#';\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\tcolor += chars[Math.floor(Math.random() * 16)];\n\t\t}\n\t\treturn color;\n\t}\n\t/**\n\t * Gets a random color between two colors\n\t * \n\t * @param {number|string} pColor1 - The first color to get a color between\n\t * @param {number|string} pColor2 - The second color to get a color between\n\t * @param {number} [pAmount=0.5] - The closer the random color will be to either input colors on a range of 0-1\n\t * 0 to 0.5 (closer to pColor1)\n\t * 0.5 to 1 (closer to pColor2)\n\t * @returns {string} A random color in the decimal format\n\t */\n\tgetRandomColorBetween(pColor1, pColor2, pAmount = 0.5) {\n\t\t// u is the amount of the lerp 0-1\n\t\treturn this.flooredLerp(this.grabColor(pColor1).decimal, this.grabColor(pColor2).decimal, pAmount);\n\t}\n\t/**\n\t * Transition a color to another color in pDuration time.\n\t * \n\t * @param {Object} pInstance - The instance to transition it's color property.\n\t * pInstance's color will be transitioned either via pInstance.color = newColor\n\t * or\n\t * pInstance.color.tint = newColor (if the color is defined as an object)\n\t * @param {string|number} pStartColor - The start color\n\t * @param {string|number} pEndColor - The end color\n\t * @param {number} pDuration - The duration of the transition\n\t * @param {Function} pIterativeCallback - Callback to call every tick of the transition\n\t * @param {Function} pEndCallback - Callback to call at the end of the transition\n\t * @returns An ID that references this transition to be passed to cancelTransition to stop an ongoing transition.\n\t */\n\ttransitionColor(pInstance, pStartColor='#000', pEndColor='#fff', pDuration=1000, pIterativeCallback, pEndCallback) {\n\t\t// Cannot use this API on the server\n\t\tif (!globalThis.window) return;\n\t\tconst iterativeCallback = typeof(pIterativeCallback) === 'function' ? pIterativeCallback : null;\n\t\tconst endCallback = typeof(pEndCallback) === 'function' ? pEndCallback : null;\n\t\tlet id;\n\t\tlet isParticle;\n\t\tlet isTintObject;\n\n\t\tif (pInstance) {\n\t\t\tid = pInstance.id ? pInstance.id : this.generateID();\n\t\t\tisParticle = (pInstance.type === 'GeneratedParticle');\n\t\t\tisTintObject = (typeof(pInstance.color) === 'object' && pInstance.color.constructor === Object ? true : false);\n\t\t\tif (this.transitions[id]) this.cancelTransitionColor(id);\n\t\t} else {\n\t\t\tid = this.generateID();\n\t\t}\n\t\t\t\n\t\tthis.transitions[id] = {\n\t\t\t'duration': pDuration,\n\t\t\t'timeTracker': isParticle ? pInstance.info.lifetime : 0\n\t\t};\n\n\t\tconst rgbStartColor = this.grabColor(pStartColor).rgbArray;\n\t\tconst rgbEndColor = this.grabColor(pEndColor).rgbArray;\n\n\t\tconst self = this;\n\t\tthis.transitions[id].step = (pTimeStamp) => {\n\t\t\tif (self.transitions[id]) {\n\t\t\t\tif (isParticle) {\n\t\t\t\t\tif (pInstance.info) {\n\t\t\t\t\t\tif (pInstance.info.owner) {\n\t\t\t\t\t\t\tif (pInstance.info.owner.settings.paused) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (self.transitions[id]) this.cancelTransitionColor(id);\n\t\t\t\t\t\treturn;\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst now = pTimeStamp;\n\t\t\t\tif (!self.transitions[id].lastTime) self.transitions[id].lastTime = now;\n\t\t\t\tconst elapsed = now - self.transitions[id].lastTime;\n\t\t\t\t// Time tracker is used rather than lastStamp - startStamp because this currently takes into account particles passed in (this will be removed in the future and use the former method)\n\t\t\t\tself.transitions[id].timeTracker += elapsed;\n\t\t\t\t// The max value of percentage is 1, so we clamp it at 1\n\t\t\t\tconst percentage = Math.min(self.transitions[id].timeTracker / self.transitions[id].duration, 1);\n\t\t\t\t\n\t\t\t\tconst r = parseInt(self.lerp(rgbStartColor[0], rgbEndColor[0], percentage), 10);\n\t\t\t\tconst g = parseInt(self.lerp(rgbStartColor[1], rgbEndColor[1], percentage), 10);\n\t\t\t\tconst b = parseInt(self.lerp(rgbStartColor[2], rgbEndColor[2], percentage), 10);\n\t\t\t\tconst color = self.grabColor(r, g, b);\n\n\t\t\t\tif (iterativeCallback) iterativeCallback(color);\n\n\t\t\t\tif (pInstance) {\n\t\t\t\t\tif (isTintObject) {\n\t\t\t\t\t\tpInstance.color.tint = color.decimal;\n\t\t\t\t\t\tpInstance.color = pInstance.color;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpInstance.color = color.hex;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (percentage >= 1 || self.transitions[id].timeTracker >= pDuration) {\n\t\t\t\t\tif (self.transitions[id]) this.cancelTransitionColor(id);\n\t\t\t\t\tif (endCallback) endCallback(color);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tself.transitions[id].req = globalThis.requestAnimationFrame(self.transitions[id].step);\n\t\t\t\tself.transitions[id].lastTime = now;\n\t\t\t}\n\t\t}\n\n\t\tthis.transitions[id].req = globalThis.requestAnimationFrame(this.transitions[id].step);\n\t\treturn id;\n\t}\n\t/**\n\t * Cancels an ongoing transition\n\t * \n\t * @param {string} pID - The ID of the ongoing transition to cancel\n\t */\n\tcancelTransitionColor(pID) {\n\t\tif (this.transitions[pID]) {\n\t\t\tglobalThis.cancelAnimationFrame(this.transitions[pID].req);\n\t\t\tdelete this.transitions[pID];\n\t\t}\n\t}\n\t/**\n\t * Calculates the position of a point after rotating it around a center point by a given angle.\n\t * \n\t * @param {object} pRect - The rectangle object to rotate the point around.\n\t * pRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle.\n\t * @param {number} pTheta - The angle (in radians) to rotate the point by.\n\t * @param {object} pPoint - The point object to rotate around the center of the rectangle.\n\t * @param {number} pPoint.x - The x-coordinate of the point to rotate.\n\t * @param {number} pPoint.y - The y-coordinate of the point to rotate.\n\t * @returns {object} An object with the rotated point's new x and y coordinates.\n\t */\n\tgetPointRotated(pRect, pTheta, pPoint) {\n\t\t// cx, cy - center of square coordinates\n\t\t// x, y - coordinates of a corner point of the square\n\t\t// theta is the angle of rotation\n\t\tconst cx = pRect.x + pRect.width * (typeof(pRect.anchor) === 'object' && pRect.anchor.x ? pRect.anchor.x : 0.5);\n\t\tconst cy = pRect.y + pRect.height * (typeof(pRect.anchor) === 'object' && pRect.anchor.y ? pRect.anchor.y : 0.5);\n\n\t\t// translate point to origin\n\t\tconst tempX = pPoint.x - cx;\n\t\tconst tempY = pPoint.y - cy;\n\n\t\t// now apply rotation\n\t\tconst rotatedX = tempX*Math.cos(pTheta) - tempY*(-Math.sin(pTheta));\n\t\tconst rotatedY = tempX*(-Math.sin(pTheta)) + tempY*Math.cos(pTheta);\n\n\t\t// translate back\n\t\tconst x = rotatedX + cx;\n\t\tconst y = rotatedY + cy;\n\t\treturn { 'x': x, 'y': y };\n\t}\n\t/**\n\t * Calculates the position of a rectangle's corner points and center point after rotating it around a center point by a given angle.\n\t * \n\t * @param {object} pRect - The rectangle object to rotate the point around.\n\t * pRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle.\n\t * @param {number} pTheta - The angle (in radians) to rotate the point by.\n\t * @returns {object} An object with the rotated rectangle's new corner points and center points.\n\t */\n\tgetPointsOfRotatedRect(pRect, pTheta) {\n\t\tconst tl = this.getPointRotated(pRect, pTheta, { 'x': pRect.x, 'y': pRect.y });\n\t\tconst tr = this.getPointRotated(pRect, pTheta, { 'x': pRect.x + pRect.width, 'y': pRect.y });\n\t\tconst bl = this.getPointRotated(pRect, pTheta, { 'x': pRect.x, 'y': pRect.y + pRect.height });\n\t\tconst br = this.getPointRotated(pRect, pTheta, { 'x': pRect.x + pRect.width, 'y': pRect.y + pRect.height });\n\t\tconst center = this.getPointRotated(pRect, pTheta, { 'x': pRect.x + pRect.width / 2, 'y': pRect.y + pRect.height / 2 });\n\t\treturn { 'tl': tl, 'tr': tr, 'bl': bl, 'br': br, 'center': center };\n\t}\n\t/**\n\t * Calculate the icon offset to compensate for a non-zero anchor.\n\t *\n\t * @param {Object} [pIconSize] - The size of the icon with properties `.x` and `.y`.\n\t * @param {number} [pIconSize.width=32] - The size of the icon's width.\n\t * @param {number} [pIconSize.height=32] - The size of the icon's height'.\n\t * @param {Object} [pAnchor] - The anchor point with properties `.x` and `.y`.\n\t * @param {number} [pAnchor.x=0.5] - The anchor's x value.\n\t * @param {number} [pAnchor.y=0.5] - The anchor's y value.\n\t * @param {Object} [pScale] - The scale factor applied to the object with properties `.x` and `.y`.\n\t * @param {number} [pScale.x=1] - The scale's y value.\n\t * @param {number} [pScale.y=1] - The scale's y value.\n\t * @returns {Object} - The calculated icon offset with properties `.x` and `.y`.\n\t */\n\tcalculateIconOffset(pIconSize = { width: 32, height: 32 }, pAnchor = { x: 0.5, y: 0.5 }, pScale= { x: 1, y: 1}) {\n\t\tconst scaledSize = {\n\t\t\tx: pIconSize.width * pScale.x,\n\t\t\ty: pIconSize.height * pScale.y,\n\t\t};\n\n\t\tconst offset = {\n\t\t\tx: pAnchor.x * (scaledSize.x - pIconSize.width),\n\t\t\ty: pAnchor.y * (scaledSize.y - pIconSize.height),\n\t\t};\n\n\t\treturn {\n\t\t\tx: offset.x,\n\t\t\ty: offset.y,\n\t\t};\n\t}\n}\nexport const Utils = new UtilsSingleton();\n",
    "static": true,
    "longname": "/Users/doubleactii/Documents/Github/Utils/src/utils.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Utils",
    "memberof": "src/utils.mjs",
    "static": true,
    "longname": "src/utils.mjs~Utils",
    "access": "public",
    "export": true,
    "importPath": "utils/src/utils.mjs",
    "importStyle": "{Utils}",
    "description": null,
    "lineNumber": 816,
    "undocument": true,
    "type": {
      "types": [
        "src/utils.mjs~UtilsSingleton"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "UtilsSingleton",
    "memberof": "src/utils.mjs",
    "static": true,
    "longname": "src/utils.mjs~UtilsSingleton",
    "access": "public",
    "export": true,
    "importPath": "utils/src/utils.mjs",
    "importStyle": null,
    "description": "A utilities class",
    "lineNumber": 9,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UtilsSingleton"
      },
      {
        "tagName": "@license",
        "tagValue": "Utils is free software, available under the terms of a MIT style License."
      },
      {
        "tagName": "@author",
        "tagValue": "https://github.com/doubleactii"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "transitions",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#transitions",
    "access": "private",
    "description": "Object storing all color objects being transitioned at the moment",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "storedIDs",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#storedIDs",
    "access": "private",
    "description": "An array storing all the reserved unique IDS",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "version",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#version",
    "access": "public",
    "description": "The version of the module.",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "logger",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#logger",
    "access": "private",
    "description": "The logger module this module uses to log errors / logs",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "decimalRand",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#decimalRand",
    "access": "public",
    "description": "Generates a random decimal number between two numbers with a specified number of decimal places.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A random decimal number between the two numbers with the specified number of decimal places."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum1",
        "description": "The first number to use for generating the random decimal number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum2",
        "description": "The second number to use for generating the random decimal number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pPlaces",
        "description": "The number of decimal places to include in the generated random decimal number. Defaults to 1 if not provided."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random decimal number between the two numbers with the specified number of decimal places."
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "rand",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#rand",
    "access": "public",
    "description": "Generates a random decimal number between two numbers with a specified number of decimal places.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A random decimal number between the two numbers with the specified number of decimal places."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum1",
        "description": "The first number to use for generating the random decimal number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum2",
        "description": "The second number to use for generating the random decimal number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random decimal number between the two numbers with the specified number of decimal places."
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "getPercentage",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getPercentage",
    "access": "public",
    "description": "Calculates the percentage of a value relative to a total value.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The percentage of the value relative to the total value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pValue",
        "description": "The value to calculate the percentage of."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTotalValue",
        "description": "The total value to calculate the percentage relative to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The percentage of the value relative to the total value."
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "clamp",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#clamp",
    "access": "public",
    "description": "Clamps a number between a minimum and maximum value.",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The clamped number between the minimum and maximum values."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNumber",
        "description": "The number to clamp."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "pMin",
        "description": "The minimum value to clamp the number to. Defaults to 0 if not provided."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pMax",
        "description": "The maximum value to clamp the number to. Defaults to 1 if not provided."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The clamped number between the minimum and maximum values."
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "lerp",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#lerp",
    "access": "public",
    "description": "Linearly interpolates between two values by a specified amount.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The interpolated value between the start and end values based on the specified amount."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStart",
        "description": "The start value to interpolate from."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEnd",
        "description": "The end value to interpolate to."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAmount",
        "description": "The amount to interpolate between the start and end values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The interpolated value between the start and end values based on the specified amount."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "flooredLerp",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#flooredLerp",
    "access": "public",
    "description": "Linearly interpolates between two values by a specified amount and returns the result as a floored integer.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The interpolated value between the start and end values based on the specified amount, rounded down to the nearest integer."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStart",
        "description": "The start value to interpolate from."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEnd",
        "description": "The end value to interpolate to."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAmount",
        "description": "The amount to interpolate between the start and end values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The interpolated value between the start and end values based on the specified amount, rounded down to the nearest integer."
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "round",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#round",
    "access": "public",
    "description": "Rounds a number to a specified number of decimal places.",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The rounded number to the specified number of decimal places."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNumber",
        "description": "The number to round."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pPlace",
        "description": "The number of decimal places to round to. Defaults to 1 if not provided."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The rounded number to the specified number of decimal places."
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#normalize",
    "access": "public",
    "description": "Normalizes a value between a minimum and maximum value.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The normalized value between 0 and 1 based on the input value's position between the minimum and maximum values.\nIf the difference between pMax and pMin is 0, returns 1 to avoid dividing by zero."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pVal",
        "description": "The value to normalize."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMin",
        "description": "The minimum value for normalization."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value for normalization."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The normalized value between 0 and 1 based on the input value's position between the minimum and maximum values.\nIf the difference between pMax and pMin is 0, returns 1 to avoid dividing by zero."
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "normalizeRanged",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#normalizeRanged",
    "access": "public",
    "description": "Normalizes a value between a minimum and maximum value, clamped to the range of -1 to 1.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The normalized and clamped value between -1 and 1 based on the input value's\nposition between the minimum and maximum values. If the difference between pMax and pMin is 0,\nreturns 1 to avoid dividing by zero."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pVal",
        "description": "The value to normalize."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMin",
        "description": "The minimum value for normalization."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value for normalization."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The normalized and clamped value between -1 and 1 based on the input value's\nposition between the minimum and maximum values. If the difference between pMax and pMin is 0,\nreturns 1 to avoid dividing by zero."
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "within",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#within",
    "access": "public",
    "description": "Checks if a value is within a range of minimum and maximum values (inclusive).",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the value is within the range (inclusive), false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pVal",
        "description": "The value to check."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMin",
        "description": "The minimum value of the range to check against."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value of the range to check against."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the value is within the range (inclusive), false otherwise."
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "formatIntegerWithCommas",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#formatIntegerWithCommas",
    "access": "public",
    "description": "Formats a number by rounding it to the nearest integer and adding commas to separate thousands places.",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A string representation of the formatted number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum",
        "description": "The number to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string representation of the formatted number."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "toRadians",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#toRadians",
    "access": "public",
    "description": "Converts degrees to radians.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle in radians."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDegrees",
        "description": "The angle in degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle in radians."
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "toDegrees",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#toDegrees",
    "access": "public",
    "description": "Converts radians to degrees.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle in degrees."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pRadians",
        "description": "The angle in radians."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle in degrees."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "pick",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#pick",
    "access": "public",
    "description": "Returns a random element from the given array.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} A random element from the array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pArray",
        "description": "The input array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A random element from the array."
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "removeProperties",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#removeProperties",
    "access": "public",
    "description": "Removes properties from an object except those listed in the exclude array.",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pObject",
        "description": "The object to remove properties from."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pExclude",
        "description": "The array of property names to exclude from removal."
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "prob",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#prob",
    "access": "public",
    "description": "Returns true with probability proportional to the given number.\nThe higher the number, the higher the chance of returning true.",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true or false, based on the probability value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChance",
        "description": "The probability value, between 0 and 100 (inclusive)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true or false, based on the probability value."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getInverseDirection",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getInverseDirection",
    "access": "public",
    "description": "Gets the inverse direction of the direction passed",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The inverse direction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pDirection",
        "description": "The direction to get the inverse of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The inverse direction"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getAngleFromDirection",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getAngleFromDirection",
    "access": "public",
    "description": "Calculates the angle (in radians) from a given direction.",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle (in radians) associated with the given direction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pDirection",
        "description": "The direction to calculate the angle from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle (in radians) associated with the given direction."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the direction is not recognized."
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "centerRectangleOnParent",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#centerRectangleOnParent",
    "access": "public",
    "description": "Centers a rectangle (defined by its dimensions) within a parent rectangle.",
    "examples": [
      "const childWidth = 50;\nconst childHeight = 30;\nconst parentWidth = 100;\nconst parentHeight = 80;\nconst parentX = 20;\nconst parentY = 10;\nconst centeredCoordinates = centerRectangleOnParent(childWidth, childHeight, parentWidth, parentHeight, parentX, parentY);\n// Returns {x: 45, y: 35}"
    ],
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} An object representing the new coordinates of the centered rectangle: { x: centerX, y: centerY }."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChildWidth",
        "description": "The width of the child rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChildHeight",
        "description": "The height of the child rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentWidth",
        "description": "The width of the parent rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentHeight",
        "description": "The height of the parent rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentX",
        "description": "The x-coordinate of the parent rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentY",
        "description": "The y-coordinate of the parent rectangle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object representing the new coordinates of the centered rectangle: { x: centerX, y: centerY }."
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getRandomAngle",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getRandomAngle",
    "access": "public",
    "description": "Generates a random angle in radians.",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A random angle in radians."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random angle in radians."
    },
    "params": []
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "getAngle",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getAngle",
    "access": "public",
    "description": "Gets the angle between two points",
    "lineNumber": 319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle between the starting point and the ending point"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint",
        "description": "The starting point"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint",
        "description": "The ending point"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle between the starting point and the ending point"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getAngle2",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getAngle2",
    "access": "public",
    "description": "Gets the angle between two points but in VYLO / PIXI coordinate space. Removes 180 degrees from a raw angle",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle between the starting point and the ending point"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint",
        "description": "The starting point"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint",
        "description": "The ending point"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle between the starting point and the ending point"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "convertRaWAngleToVyloCoords",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#convertRaWAngleToVyloCoords",
    "access": "public",
    "description": "Converts a raw angle to be the proper angle in Vylocity. By removing 180 degrees",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The converted angle"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAngle",
        "description": "The angle to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The converted angle"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getMinimal",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getMinimal",
    "access": "public",
    "description": "Gets the minimal value between the value to add and the maximum allowed value.",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The minimal value between the value to add and the remaining value to reach the maximum."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCurrent",
        "description": "The current value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAdd",
        "description": "The value to add to the current value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value that can be reached."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The minimal value between the value to add and the remaining value to reach the maximum."
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getDistance",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getDistance",
    "access": "public",
    "description": "Calculates the Euclidean distance between two points in a two-dimensional space.",
    "examples": [
      "const startPoint = { x: 1, y: 2 };\nconst endPoint = { x: 4, y: 6 };\nconst distance = getDistance(startPoint, endPoint); // 5\n// Returns the Euclidean distance between the points (1, 2) and (4, 6)."
    ],
    "lineNumber": 373,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The Euclidean distance between the two points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint",
        "description": "The starting point with x and y coordinates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint.x",
        "description": "The x-coordinate of the starting point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint.y",
        "description": "The y-coordinate of the starting point."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint",
        "description": "The ending point with x and y coordinates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint.x",
        "description": "The x-coordinate of the ending point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint.y",
        "description": "The y-coordinate of the ending point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The Euclidean distance between the two points."
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "calculateNewPositionFromDistanceAndAngle",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#calculateNewPositionFromDistanceAndAngle",
    "access": "public",
    "description": "Calculates the new position of a point based on distance and angle.",
    "examples": [
      "const initialPosition = { x: 10, y: 20 };\nconst distance = 5;\nconst angleInRadians = 0.785398; // 45 degrees\nconst newPosition = calculateNewPositionFromDistanceAndAngle(initialPosition, distance, angleInDegrees);\n// Returns the new position of the point after moving by 5 units at a 45-degree angle."
    ],
    "lineNumber": 395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The new position of the point after moving by the specified distance and angle."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint",
        "description": "The initial position of the point with x and y coordinates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.x",
        "description": "The initial x-coordinate of the point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.y",
        "description": "The initial y-coordinate of the point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDistance",
        "description": "The distance by which to move the point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAngle",
        "description": "The angle (in radians) at which to move the point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The new position of the point after moving by the specified distance and angle."
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "calculateProportionalLength",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#calculateProportionalLength",
    "access": "public",
    "description": "Calculates the proportional length based on a current value, a maximum value, and a specified total length.",
    "examples": [
      "const current = 25;\nconst max = 50;\nconst totalLength = 100;\nconst proportionalLength = calculateProportionalLength(current, max, totalLength); // 50\n// Returns the proportional length based on the current value, maximum value, and total length."
    ],
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The proportional length based on the current value, maximum value, and total length."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCurrent",
        "description": "The current value to be scaled."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value for scaling."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTotalLength",
        "description": "The specified total length."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The proportional length based on the current value, maximum value, and total length."
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getDirection",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getDirection",
    "access": "public",
    "description": "Calculates the compass direction based on the given angle.",
    "examples": [
      "const angle = Math.PI / 4; // 45 degrees in radians\nconst direction = getDirection(angle); // Returns 'northeast'"
    ],
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The compass direction (e.g., 'east', 'southeast', 'south', etc.)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAngle",
        "description": "The angle in radians."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The compass direction (e.g., 'east', 'southeast', 'south', etc.)."
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "linearDecay",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#linearDecay",
    "access": "public",
    "description": "Calculates the linear decay of a variable over time.",
    "examples": [
      "const initialValue = 100;\nconst currentTime = 50;\nconst maxTime = 1000;\nconst decayRate = 0.3;\nconst remainingValue = linearDecay(initialValue, currentTime, maxTime, decayRate);\n// Returns the remaining value after linear decay."
    ],
    "lineNumber": 459,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The remaining value of the variable after linear decay."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pInitialValue",
        "description": "The initial value of the variable."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCurrentTime",
        "description": "The current time at which to calculate the variable value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMaxTime",
        "description": "The maximum time for the decay process."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "pDecayRate",
        "description": "The decay rate (default is 0.5)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The remaining value of the variable after linear decay."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "generateID",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#generateID",
    "access": "public",
    "description": "Generates a unique id",
    "lineNumber": 471,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "A unique ID"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pIDLength",
        "description": "The length of the ID to create"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A unique ID"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "decimalToHex",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#decimalToHex",
    "access": "public",
    "description": "Converts a color in decimal format into hex format",
    "lineNumber": 494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The decimal color converted into hex format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDecimal",
        "description": "The color in decimal format"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChars",
        "description": "The length to make the hex string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The decimal color converted into hex format"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "addIntensity",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#addIntensity",
    "access": "public",
    "description": "Add intensity to this color to get a brighter or dimmer effect",
    "lineNumber": 504,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pColor",
        "description": "Color in hex format or decimal format"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPercent",
        "description": "The percent of brightness to add to this color"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "rgbToHex",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#rgbToHex",
    "access": "public",
    "description": "Converts an RGB color value to a hexadecimal color value.",
    "lineNumber": 525,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pR",
        "description": "The red component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pG",
        "description": "The green component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pB",
        "description": "The blue component of the RGB color value (0-255)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "hexToRgb",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#hexToRgb",
    "access": "public",
    "description": "Converts a hexadecimal color value to an RGB color value.",
    "lineNumber": 541,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - An array containing the red, green, and blue components of the RGB color value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pHex",
        "description": "The hexadecimal color value to convert (e.g. \"#FF0000\" for red)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array containing the red, green, and blue components of the RGB color value."
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "rgbToDecimal",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#rgbToDecimal",
    "access": "public",
    "description": "Converts RGB color values to a decimal value.",
    "lineNumber": 559,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pR",
        "description": "The red component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pG",
        "description": "The green component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pB",
        "description": "The blue component of the RGB color value (0-255)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "hexToDecimal",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#hexToDecimal",
    "access": "public",
    "description": "Converts a hexadecimal color value to a decimal value.",
    "lineNumber": 568,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - The decimal representation of the hexadecimal color value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pHex",
        "description": "The hexadecimal color value to convert (e.g. \"#FF0000\" for red)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The decimal representation of the hexadecimal color value."
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "grabColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#grabColor",
    "access": "public",
    "description": "Convert a color to different formats or get a random color",
    "lineNumber": 582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorObject} A color object with various different export options.\nhex, hexTagless, rgb, rgbArray, rgbObject, rgbNormal, decimal formats."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pSwitch",
        "description": "A hex string representing a color (with or without the tag)\nA color formatted in the decimal format. Or the r value of a rgb color."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "g",
        "description": "g value of a rgb color"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "b",
        "description": "b value of a rgb color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorObject"
      ],
      "spread": false,
      "description": "A color object with various different export options.\nhex, hexTagless, rgb, rgbArray, rgbObject, rgbNormal, decimal formats."
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "getRandomColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getRandomColor",
    "access": "public",
    "description": "Gets a random color",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A random color in the hex format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A random color in the hex format"
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getRandomColorBetween",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getRandomColorBetween",
    "access": "public",
    "description": "Gets a random color between two colors",
    "lineNumber": 630,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A random color in the decimal format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pColor1",
        "description": "The first color to get a color between"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pColor2",
        "description": "The second color to get a color between"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "pAmount",
        "description": "The closer the random color will be to either input colors on a range of 0-1\n0 to 0.5 (closer to pColor1)\n0.5 to 1 (closer to pColor2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A random color in the decimal format"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "transitionColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#transitionColor",
    "access": "public",
    "description": "Transition a color to another color in pDuration time.",
    "lineNumber": 648,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "An ID that references this transition to be passed to cancelTransition to stop an ongoing transition."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to transition it's color property.\npInstance's color will be transitioned either via pInstance.color = newColor\nor\npInstance.color.tint = newColor (if the color is defined as an object)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartColor",
        "description": "The start color"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndColor",
        "description": "The end color"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDuration",
        "description": "The duration of the transition"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pIterativeCallback",
        "description": "Callback to call every tick of the transition"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndCallback",
        "description": "Callback to call at the end of the transition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An ID that references this transition to be passed to cancelTransition to stop an ongoing transition."
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "cancelTransitionColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#cancelTransitionColor",
    "access": "public",
    "description": "Cancels an ongoing transition",
    "lineNumber": 732,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pID",
        "description": "The ID of the ongoing transition to cancel"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getPointRotated",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getPointRotated",
    "access": "public",
    "description": "Calculates the position of a point after rotating it around a center point by a given angle.",
    "lineNumber": 749,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} An object with the rotated point's new x and y coordinates."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pRect",
        "description": "The rectangle object to rotate the point around.\npRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTheta",
        "description": "The angle (in radians) to rotate the point by."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint",
        "description": "The point object to rotate around the center of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.x",
        "description": "The x-coordinate of the point to rotate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.y",
        "description": "The y-coordinate of the point to rotate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object with the rotated point's new x and y coordinates."
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getPointsOfRotatedRect",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getPointsOfRotatedRect",
    "access": "public",
    "description": "Calculates the position of a rectangle's corner points and center point after rotating it around a center point by a given angle.",
    "lineNumber": 777,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} An object with the rotated rectangle's new corner points and center points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pRect",
        "description": "The rectangle object to rotate the point around.\npRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTheta",
        "description": "The angle (in radians) to rotate the point by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object with the rotated rectangle's new corner points and center points."
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "calculateIconOffset",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#calculateIconOffset",
    "access": "public",
    "description": "Calculate the icon offset to compensate for a non-zero anchor.",
    "lineNumber": 799,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The calculated icon offset with properties `.x` and `.y`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "pIconSize",
        "description": "The size of the icon with properties `.x` and `.y`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "32",
        "defaultRaw": 32,
        "name": "pIconSize.width",
        "description": "The size of the icon's width."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "32",
        "defaultRaw": 32,
        "name": "pIconSize.height",
        "description": "The size of the icon's height'."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "pAnchor",
        "description": "The anchor point with properties `.x` and `.y`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "pAnchor.x",
        "description": "The anchor's x value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "pAnchor.y",
        "description": "The anchor's y value."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "pScale",
        "description": "The scale factor applied to the object with properties `.x` and `.y`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pScale.x",
        "description": "The scale's y value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pScale.y",
        "description": "The scale's y value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The calculated icon offset with properties `.x` and `.y`."
    }
  },
  {
    "kind": "index",
    "content": "# Utils Module\n\nUtils is a lightweight and versatile JavaScript utility class designed to provide commonly used functions for web development. It is a collection of various helper functions that can be used in a variety of projects.\n\n## Installation\n\n### ES Module\n\n```js\nimport { Utils } from './utils.mjs';\n```\n\n### IIFE (Immediately Invoked Function Expression)\n\n```js\n<script src=\"utils.js\"></script>;\n// ...\nwindow.UtilsBundle.Utils;\n```\n\n### CommonJS (CJS) Module\n\n```js\nconst { Utils } = require('./utils.cjs.js');\n```\n\nYou can then call any of the functions available in the Utils class.\n\n# API\ndecimalRand(pNum1, pNum2, pPlaces)\n- Generates a random decimal number between **`pNum1`** and **`pNum2`** with **`pPlaces`** decimal places.\n\nrand(pNum1, pNum2)\n- Generates a random integer between **`pNum1`** and **`pNum2`**.\n\ngetPercentage(pValue, pTotalValue)\n- Calculates the percentage of **`pValue`** in relation to **`pTotalValue`**.\n\nclamp(pNumber, pMin, pMax)\n- Clamps **`pNumber`** between **`pMin`** and **`pMax`**.\n\nlerp(pStart, pEnd, pAmount)\n- Linearly interpolates between **`pStart`** and **`pEnd`** by **`pAmount`**.\n\nflooredLerp(pStart, pEnd, pAmount)\n- Linearly interpolates between **`pStart`** and **`pEnd`** by **`pAmount`**, then floors the result.\n\nround(pNumber, pPlace)\n- Rounds pNumber to **`pPlace`** decimal places.\n\nnormalize(pVal, pMin, pMax)\n- Normalizes pVal between **`pMin`** and **`pMax`**.\n\nwithin(pVal, pMin, pMax)\n- Checks if **`pVal`** is within the range of **`pMin`** and **`pMax`**.\n\nformatIntegerWithCommas(pNum)\n- Formats **`pNum`** as a string with commas between every three digits.\n\ntoRadians(pDegrees)\n- Converts degrees to radians.\n\ntoDegrees(pRadians)\n- Converts radians to degrees.\n\npick(pArray)\n- Returns a random element from **`pArray`**.\n\nremoveProperties(pObject, pExclude)\n- Removes all properties from **`pObject`**, excluding those in **`pExclude`**.\n\nprob(pChance)\n- Returns true with a probability of **`pChance`**, and false with a probability of **`100 - pChance`**.\n\ngetInverseDirection(pDir)\n- Returns the opposite direction of **`pDir`**.\n\ngetAngleFromDirection(pDir)\n- Returns the angle in radians corresponding to **`pDir`**.\n\ngenerateID(pIDLength)\n- Generates a random unique ID string of length **`pIDLength`**.\n\ndecimalToHex(pDecimal, pChars)\n- Converts a decimal number to a hexadecimal color string with pChars characters. **`pChars`** can either be **`3`** or **`6`**.\n\naddIntensity(pColor, pPercent)\n- Increases the intensity of pColor by **`pPercent`** **`percent`**.\n\nrgbToHex(pR, pG, pB)\n- Converts an RGB color to a hexadecimal color string.\n\nhexToRgb(pHex)\n- Converts a hexadecimal color string to an RGB color.\n\nrgbToDecimal(pR, pG, pB)\n- Converts an RGB color to a decimal number.\n\nhexToDecimal(pHex)\n- Converts a hexadecimal color string to a decimal number.\n\ngrabColor(pSwitch, pG, pB)\n- Returns a color object with a hexadecimal color string, tagless hexadecimal color string, RGB string, RGB color array, RGB normalized array, RGB object, and decimal color number. If **`pSwitch`** is a number, **`pG`** and **`pB`** must also be numbers and represent the green and blue components of the color respectively. If **`pSwitch`** is a string, it can either be a hexadecimal color string or a decimal color.\n\ngetRandomColor()\n- Gets a random color in the hex format.\n\ngetRandomColorBetween(pColor1, pColor2, pAmount = 0.5)\n- Gets a random color between **`pColor1`** and **`pColor2`** in the decimal format. **`pAmount`** can be used to change how close the returned color is to either **`pColor1`** or **`pColor2`**.\n\ntransitionColor(pInstance, pStartColor='#000', pEndColor='#fff', pDuration=1000, pIterativeCallback, pEndCallback)\n- Transition **`pStartColor`** to **`pEndColor`** in **`pDuration`** time with callbacks to track the animation. Where **`pIterativeCallback`** is called each frame and **`pEndCallback`** is called at the end of the animation. This API returns the **`ID`** of the transition. So that if you want to cancel it, you can use **`cancelTransitionColor(ID)`**.\n\ncancelTransitionColor(pID)\n- Cancels an ongoing transition with the **`ID`** of **`pID`**.\n\ngetPointRotated(pRect, pTheta, pPoint)v\n- Calculates the position of a point after rotating it around a center point by a given angle.\n- @param {object} pRect - The rectangle object to rotate the point around. pRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle.\n- @param {number} pTheta - The angle (in radians) to rotate the point by.\n- @param {object} pPoint - The point object to rotate around the center of the rectangle.\n- @param {number} pPoint.x - The x-coordinate of the point to rotate.\n- @param {number} pPoint.y - The y-coordinate of the point to rotate.\n- @returns {object} An object with the rotated point's new x and y coordinates.\n\ngetPointsOfRotatedRect(pRect, pTheta)\n- @param {object} pRect - The rectangle object to rotate the point around. **`pRect.anchor.x`** and **`pRecent.anchor.y`** is used to control the \"center\" of the rectangle.\n- @param {number} pTheta - The angle (in radians) to rotate the point by.\n- @returns {object} An object with the rotated rectangle's new corner points and center points.\n\n### Global Dependency\n\nUtils relies on the `VYLO` variable being globally accessible.",
    "longname": "/Users/doubleactii/Documents/Github/Utils/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"utils\",\n  \"version\": \"1.0.1\",\n  \"description\": \"A utilities class\",\n  \"main\": \"dist/utils.mjs\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build:rollup\": \"npx rollup -c --failAfterWarnings\",\n    \"build:docs\": \"esdoc -c esdoc.json\",\n    \"build:dist\": \"npm run build:rollup && npm run build:docs\"\n  },\n  \"author\": \"https://github.com/doubleactii\",\n  \"license\": \"SEE LICENSE IN LICENSE.md\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/EvitcaStudio/Utils\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/EvitcaStudio/Utils/issues\"\n  },\n  \"homepage\": \"https://github.com/EvitcaStudio/Utils#readme\",\n  \"devDependencies\": {\n    \"@rollup/plugin-babel\": \"^6.0.4\",\n    \"@rollup/plugin-terser\": \"^0.4.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"rollup\": \"^4.14.1\",\n    \"rollup-plugin-banner2\": \"^1.2.3\",\n    \"rollup-plugin-cleandir\": \"^2.0.0\",\n    \"rollup-plugin-replace\": \"^2.2.0\"\n  }\n}\n",
    "longname": "/Users/doubleactii/Documents/Github/Utils/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]